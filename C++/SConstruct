# -*- mode:python; coding:utf-8; -*-

#  Calculation of π using quadrature.
#
#  Copyright © 2008–2013 Russel Winder

import os
import re
import sys
sys.path.append('../site_scons')

from executablesupport import compileTargets, addCompileTarget, runTargets, addRunTarget, executables, createHelp

osName, _, _, _, platformVersion = os.uname()
platformVersion = re.sub('i.86', 'ix86', platformVersion)
extraLibName = os.environ['HOME'] + '/lib.' + osName + '.' + platformVersion

ccFlags = ['-O3', '-Wall', '-Wextra']

cEnvironment = Environment(tools=['gcc'])

cppFlags = ccFlags + ['-std=c++11']

cppEnvironment = Environment(tools=['g++', 'gnulink'])

microsecondTime = cEnvironment.Object('../Timing/microsecondTime.c', CFLAGS=ccFlags)
output = cppEnvironment.Object('output.cpp', CXXFLAGS=cppFlags)

def cppRule(globPattern, compiler='g++', cpppath=[], cxxflags=cppFlags, linkflags=[], libpath=[], libs=[]):
    for item in Glob(globPattern):
        executables.append(
            addCompileTarget(
                cppEnvironment.Program(
                    os.path.splitext(item.name)[0], [item.name, microsecondTime, output],
                    CXX=compiler, CPPPATH=['../Timing'] + cpppath, CXXFLAGS=cxxflags, LINKFLAGS=linkflags + ['-std=c++11'], LIBPATH=libpath, LIBS=libs)))

cppRule('pi_sequential*.cpp')
cppRule('pi_thread*.cpp')
cppRule('pi_futures*.cpp')
cppRule('pi_pthread*.cpp', libs=['pthread'])
cppRule('pi_mpi*.cpp', compiler='mpic++')  #  This MPI execution target runs things sequentially.  Use the command "mpirun -np N pi_c_mpi" to run the code on N processors.
cppRule('pi_openmp*.cpp', cxxflags=cppFlags + ['-fopenmp'], libs=['gomp'])
cppRule('pi_boostThread*.cpp', libs=['boost_thread'])
cppRule('pi_boostMPI*.cpp', compiler='mpic++', libs=['boost_mpi'])
cppRule('pi_tbb*.cpp', libs=['tbb'])

cppRule('pi_cppcsp2.cpp', cpppath=[os.environ['HOME'] + '/include'], libpath=[extraLibName], libs=['cppcsp2', 'pthread'])
cppRule('pi_justThread*.cpp', cpppath=[extraLibName + '/JustThreadPro/include'], linkflags=['--static'], libpath=[extraLibName + '/JustThreadPro/libs'], libs=['justthread'])


for item in executables:
    addRunTarget(Command('run_' + item[0].name, item, './' + item[0].name))

Help(createHelp())
