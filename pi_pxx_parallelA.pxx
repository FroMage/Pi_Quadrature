# -*- mode:perl; coding:utf-8; -*-

#  Calculation of Pi using quadrature. Parallel algorithms coded in Hyper-Werx Par++ for Raptor Live.
#
#  Copyright Â© 2009 Russel Winder, William Braswell Jr.

#  This is a variation by Russel of Implementation A provided by William which was based on the original
#  sequential code by Russel.  Par++ uses a form of data parallelism so using arrays in what looks like a
#  scalar expression actually leads to parallel execution on each element of the array.

#  Use a function rather than inline so as to avoid using global variables.

n = 500 ; # needs to be small until new C++ engine is complete
delta = 1.0 / n ;
pi = 4.0 * partialSums ( n ) * delta ;
print ( "==== Par++ Parallel Implementation A pi = " , pi, "\n" ) ;
print ( "==== Par++ Parallel Implementation A iteration count = " , n, "\n" ) ;

sub partialSums ( numIterations ) {
    #  Make an array [ 1 , 2 , 3 , . . . , n + 1 ]
    x = range ( 1 , numIterations ) ;
    #  Expressions on the array actually specify parallel executions on each element of the array.  Leave
    #  the engine to distribute the operations acros the available processors.
    x = ( x - 0.5 ) * delta ;
    x = 1.0 / ( 1.0 + x * x ) ;
    #  Sum all elements to the zeroth.  This auto parallelizes.  Cannot index the result of the add call
    #  directly -- have to use a variable :-(
    #return ( add ( x ) [0] ) ;
    accumulator = add ( x ) ;
    return ( accumulator[0] ) ;
}
