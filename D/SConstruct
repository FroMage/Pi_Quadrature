# -*- mode:python; coding:utf-8; -*-

#  Calculation of Pi using quadrature using teh D programming language..
#
#  Copyright © 2008–2013 Russel Winder

import os
import sys
sys.path.append('../site_scons')

from executablesupport import compileTargets, addCompileTarget, runTargets, addRunTarget, executables, createHelp

##  DMD 2.059 worked, DMD 2.060 has issues – various problems with the thread. GDC on Debian as at
## 2012-09-06 realizes D 2.056 and so barfs on some constructs introduced after that version. LDC compiled
## from master/HEAD as at 2012-11--11 is D 2.060+changes and works fine. Except for
## pi_d_threadsGlobalState_array_declarative.d. See http://d.puremagic.com/issues/show_bug.cgi?id=8774. It
## appears that pi_d_threadsGlobalState_array_declarative.d should never have worked under 2.059 as it was:
## maps are iterable but lazy, the array needs to be instantiated for the algorithm to work as required.
##
##  pi_d_threadsGlobalState_array_iterative.d and pi_d_threadsGlobalState_threadGroup.d fail on DMD 2.060
##  but worked under 2.059, and work under LDC2.

dEnvironment = {
    'dmd': Environment(tools=['link', 'dmd'],  # Why is the order crucial here?
                       DFLAGS=['-O', '-release'],
                       #DC='gdmd'
                       ),
    'gdc':  Environment(tools=['link', 'gdc'],  # Why is the order crucial here?
                        DFLAGS=['-O3'],
                        ),
    'ldc': Environment(tools=['link', 'ldc'],  # Why is the order crucial here?
                       ENV = os.environ,
                       DFLAGS=['-O', '-release'],
                       ),
#}['dmd']
#}['gdc']
}['ldc']

outputFunctions = dEnvironment.Object('outputFunctions.d')

for item in Glob('pi_*.d'):
    root = os.path.splitext(item.name)[0]
    executables.append(addCompileTarget(dEnvironment.Program([item, outputFunctions])))

Help(createHelp())
