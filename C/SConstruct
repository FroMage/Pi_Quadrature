# -*- mode:python; coding:utf-8; -*-

#  Calculation of π using quadrature.
#
#  Copyright © 2008–2013 Russel Winder

import os
import sys
sys.path.append('../site_scons')

from executablesupport import compileTargets, addCompileTarget, addRunTarget, createHelp

ccFlags = ['-O3', '-Wall', '-Wextra', '-std=c11']

cEnvironment = Environment(tools=['gcc', 'gnulink'])

# Fedora Rawhide packaging does not put symbolic links to the executables into /usr/bin, so we must add the
# /usr/lib64/openmpi/bin directory to the path.
fedoraOpenMPIDirectory = '/usr/lib64/openmpi/bin'
if os.path.exists(fedoraOpenMPIDirectory):
    cEnvironment['ENV']['PATH'] += ':{}'.format(fedoraOpenMPIDirectory)

microsecondTime = cEnvironment.Object('microsecondTime.c', CFLAGS=ccFlags)
output = cEnvironment.Object('output.c', CFLAGS=ccFlags)

def cRule(globPattern, compiler='gcc', cpppath=[], cflags=ccFlags, linkflags=[], libpath=[], libs=[]):
    for item in Glob(globPattern):
        addRunTarget(cEnvironment,
            addCompileTarget(
                cEnvironment.Program(
                    os.path.splitext(item.name)[0], [item.name, microsecondTime, output],
                    CC=compiler, CPPPATH=cpppath, CFLAGS=cflags, LINKFLAGS=linkflags + ['-std=c11'], LIBPATH=libpath, LIBS=libs)))

cRule('pi_sequential*.c')
cRule('pi_pthread*.c', libs=['pthread'])
cRule('pi_mpi*.c', compiler='mpicc')  #  This execution target runs things sequentially.  Use the command "mpirun -np N pi_c_mpi" to run the code on N processors.
cRule('pi_openmp*.c', cflags=ccFlags + ['-fopenmp'], libs=['gomp'])  #  Assumes gcc is 4.2.0 or greater since that is when gomp was included.

Default(compileTargets)

Help(createHelp())
